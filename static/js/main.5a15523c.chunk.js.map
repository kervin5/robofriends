{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","hoc/ErrorBoundry.js","components/CounterButton.js","components/Header.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","cardList","cardsToRender","robots","map","user","Card","key","searchBox","searchField","searchChange","type","placeholder","onChange","scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","CounterButton","count","updateCount","_this","prevState","Object","objectSpread","nextProps","nextState","color","onClick","Header","Fragment","components_CounterButton","App","onRequestRobots","_this$props","onSearchChange","isPending","console","log","filteredRobots","filter","robot","toLowerCase","includes","components_Header","SearchBox","Scroll","hoc_ErrorBoundry","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5a15523c.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ({name, email, id}) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id + name}?200x200`} alt={\"robot\"}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst cardList = ({robots}) => {\n\n    // throw new Error('What');\n\n    const cardsToRender = robots.map(user => <Card id={user.id} name={user.name} email={user.email} key={user.id}/>);\n\n    return (\n        <div>\n            {cardsToRender}\n        </div>\n    );\n};\n\nexport default cardList;","import React from 'react';\n\nconst searchBox = ({searchField, searchChange}) => {\n    return(\n        <div className='pa2'>\n             <input type=\"search\" placeholder=\"search robots\" className=\"pa3 ba b--green bg-lightest-blue\" onChange={searchChange}/>\n        </div>\n\n    );\n};\n\nexport default searchBox;","import React from 'react';\n\nconst scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n\n};\n\nexport default scroll;","import React, {Component} from 'react';\n\n// THe error Boundry will display in production mode\n\nclass ErrorBoundry extends Component {\n   state = {\n\n\n       hasError: false\n   };\n\n   componentDidCatch(error, errorInfo) {\n       this.setState({hasError: true});\n   }\n\n    render() {\n       if(this.state.hasError) {\n           return <h1>Ooooops. That is not good</h1>\n       }\n\n       return  this.props.children;\n   }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react'\n\nclass CounterButton extends Component {\n\n    state =  {\n        count: 0\n    };\n\n\n    //Prevents child component from updating even if parent updates\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.count !== nextState.count;\n    }\n\n    updateCount = () => {\n        this.setState(prevState =>{\n            return { ...prevState, count: prevState.count + 1 }\n        });\n    };\n\n    render() {\n        return <button color={this.props.color} onClick={this.updateCount}> Count: {this.state.count}</button>\n    }\n}\n\nexport default CounterButton;","import React, {Component} from 'react'\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    //Doesn't affect render of child compoents if props or state change\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return false;\n    // }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CounterButton color=\"red\" />\n                <h1 className='f1'>ROBOFRIENDS</h1>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import Card from './components/Card';\nimport {connect} from \"react-redux\";\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox'\nimport Scroll from './components/Scroll';\nimport ErrorBoundry from './hoc/ErrorBoundry.js';\nimport Header from './components/Header';\n\n\nimport { setSearchField, requestRobots} from \"./actions\";\n\nclass App extends Component {\n    // state = {\n    //     robots: []\n    // };\n\n    componentDidMount() {\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        //     .then(response => {\n        //         return response.json()\n        //     })\n        //     .then(users => {\n        //         this.setState({robots: users})\n        //     });\n\n        // this.setState({robots: robots});\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        // const {robots} = this.state;\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        console.log(searchField);\n\n        const filteredRobots = robots.filter(robot => {\n\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        if (isPending) {\n            return <h1>Loading</h1>;\n        } else {\n            return (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n\n            );\n        }\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n  }\n};\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = ()=> dispatch => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n        return response.json()\n    })\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nimport {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload};\n        default:\n            return state;\n\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false}\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false}\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from \"./reducers\";\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}